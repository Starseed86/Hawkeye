[
  {
    "Id": "70695",
    "ThreadId": "21244",
    "Html": "<br />I'm utilizing this work-around with the Smart Client Software Factory (for the Shell and my views)<br /><br />The problem becomes evident by debugging the OnNonClientAreaHitTest(Point p) - the MDI Parent's button.Bounds will correctly hold it's coordinates but the MDI child will have incorrect values; the x and y coordinates are relative to itself where the received parameter (Point p), that it is compared to, are relative to the MDI Parent.<br /><br />The workaround that I provide below will allow you to <b>move</b> and <b>close</b> a MDI Child form (these are all I required and time-constraints don't permit me to take it further); in addition, and for the same reason, I hard-coded the values to the stock \"VistaForm\" skin; you may need to tweak the values in the CompensateForMDI() method.  <br /><br /><b>SkinRenderForm.cs</b><br /><br /><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\nprotected override int OnNonClientAreaHitTest(Point p)\r\n{\r\n    if (ActiveFormSkin == null)\r\n        return (int)NativeMethods.NCHITTEST.HTCLIENT;\r\n \r\n    foreach (CaptionButton button in this.CaptionButtons)\r\n    {\r\n        if (button.Visible &amp;&amp; button.Bounds.Contains(p) &amp;&amp; (button.HitTestCode &gt; 0 || button.HitTestCode &lt; -1))\r\n            return button.HitTestCode;\r\n    }\r\n \r\n</pre><br /><br /><br /><b>NonClientBaseForm.cs</b><br /><br />CompensateForMDI() is a new method and the methods that implement this new method follow below:<br /><br /><br /><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\nprotected Point CompensateForMDI(Point p)\r\n{\r\n    bool IsParent = Parent != null;\r\n    if (IsParent)\r\n    {\r\n        p.X -= Parent.Parent.Location.X + 10;\r\n        p.Y -= (Parent.Parent.Location.Y + 75);\r\n    }\r\n    return p;\r\n}\r\n \r\n \r\nprivate void WmNCHitTest(ref Message m)\r\n{\r\n    // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/mouseinput/mouseinputreference/mouseinputmessages/wm_nchittest.asp\r\n \r\n    Point screenPoint = CompensateForMDI(new Point(m.LParam.ToInt32()));\r\n \r\n    Log(MethodInfo.GetCurrentMethod(), string.Format(\"### Screen Point ({0},{1})\", screenPoint.X, screenPoint.Y));\r\n \r\n    // convert to local coordinates\r\n    Point clientPoint = PointToWindow(screenPoint);\r\n    Log(MethodInfo.GetCurrentMethod(), string.Format(\"### Client Point ({0},{1})\", clientPoint.X, clientPoint.Y));\r\n    m.Result = new System.IntPtr(OnNonClientAreaHitTest(clientPoint));\r\n}\r\n \r\nprivate void WmNCMouseMove(ref Message msg)\r\n{\r\n    // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/mouseinput/mouseinputreference/mouseinputmessages/wm_nchittest.asp\r\n    Point clientPoint = CompensateForMDI(this.PointToWindow(new Point(msg.LParam.ToInt32())));\r\n    OnNonClientMouseMove(new MouseEventArgs(MouseButtons.None, 0,\r\n        clientPoint.X, clientPoint.Y, 0));\r\n    msg.Result = IntPtr.Zero;\r\n}\r\n \r\n \r\nprivate void WmNCLButtonDown(ref Message msg)\r\n{\r\n    Point pt = CompensateForMDI(this.PointToWindow(new Point(msg.LParam.ToInt32())));\r\n    NonClientMouseEventArgs args = new NonClientMouseEventArgs(\r\n        MouseButtons.Left, 1, pt.X, pt.Y, 0, msg.WParam.ToInt32());\r\n    OnNonClientMouseDown(args);\r\n    if (!args.Handled)\r\n    {\r\n        DefWndProc(ref msg);\r\n    }\r\n    msg.Result = NativeMethods.TRUE;\r\n}\r\n \r\n</pre><br /><br /><b>SkinRenderForm.cs</b><br /><br />The \"|| Parent!=null\" statement is the only change<br /><br /><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\nprotected override void OnNonClientMouseDown(NonClientMouseEventArgs args)\r\n{\r\n    if (args.Button != MouseButtons.Left)\r\n        return;\r\n \r\n    // custom button\r\n    foreach (CaptionButton button in this.CaptionButtons)\r\n        if (args.HitTest &gt; short.MaxValue &amp;&amp; args.HitTest == button.HitTestCode &amp;&amp; button.Visible &amp;&amp; button.Enabled)\r\n        {\r\n            ((CustomCaptionButton)button).OnClick();\r\n            args.Handled = true;\r\n            return;\r\n        }\r\n \r\n    // find appropriate button\r\n    foreach (CaptionButton button in this.CaptionButtons)\r\n    {\r\n        // [1530]: Don't execute any action when button is disabled or not visible.\r\n        if (args.HitTest == button.HitTestCode &amp;&amp; button.Visible &amp;&amp; button.Enabled)\r\n        {\r\n            Log(MethodInfo.GetCurrentMethod(), \"MouseDown: button = {0}\", button);\r\n \r\n            if (DepressButton(button) || Parent!=null)\r\n            {\r\n</pre>",
    "PostedDate": "2008-01-29T16:13:25.577-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]